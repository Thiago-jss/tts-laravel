name: CI/CD Pipeline

# Workflow de CI/CD para Laravel TTS
# Executa em: push, pull request para main/master
# Actions: install dependencies, run tests, code quality checks

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Job 1: Testes automatizados
  tests:
    name: Run Tests (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: ['8.1', '8.2', '8.3']
        # Testa em múltiplas versões do PHP

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, dom, fileinfo, sqlite3
          coverage: xdebug
          tools: composer:v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Copy .env.example to .env
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Create SQLite database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Run database migrations
        run: php artisan migrate --force

      - name: Create storage directories
        run: |
          mkdir -p storage/app/public/audio
          php artisan storage:link

      - name: Run PHPUnit tests with coverage
        env:
          ELEVEN_API_KEY: ${{ secrets.ELEVEN_API_KEY }}
          ELEVEN_VOICE_ID: ${{ secrets.ELEVEN_VOICE_ID }}
        run: php artisan test --coverage --min=70

      - name: Upload coverage to Codecov (optional)
        if: matrix.php-version == '8.2'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          fail_ci_if_error: false

  # Job 2: Code Quality (Laravel Pint)
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run Laravel Pint (code style)
        run: ./vendor/bin/pint --test

  # Job 3: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run security audit
        run: composer audit

  # Job 4: Build frontend assets (se necessário)
  # frontend:
  #   name: Build Frontend
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #     - run: npm ci
  #     - run: npm run build

